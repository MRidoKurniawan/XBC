@model XBC.ViewModel.QuestionViewModel


@using (Html.BeginForm("SetC", "Question", FormMethod.Post, new { id = "form-set", name = "form-set" }))
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.id)

        <div class="form-group">
            @Html.LabelFor(model => model.optionA, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.optionA, new { htmlAttributes = new { @class = "form-control", @placeholder = "A" } })
                @Html.ValidationMessageFor(model => model.optionA, "", new { @class = "text-danger" })
                <input type="file" id="imga" name="imga" class="img-url" value="Browse..." />
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.optionB, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.optionB, new { htmlAttributes = new { @class = "form-control", @placeholder = "B" } })
                @Html.ValidationMessageFor(model => model.optionB, "", new { @class = "text-danger" })
                <input type="file" id="imgb" name="imgb" class="img-url" value="Browse..." />
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.optionC, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.optionC, new { htmlAttributes = new { @class = "form-control", @placeholder = "C" } })
                @Html.ValidationMessageFor(model => model.optionC, "", new { @class = "text-danger" })
                <input type="file" id="imgc" name="imgc" class="img-url" value="Browse..." />
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.optionD, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.optionD, new { htmlAttributes = new { @class = "form-control", @placeholder = "D" } })
                @Html.ValidationMessageFor(model => model.optionD, "", new { @class = "text-danger" })
                <input type="file" id="imgd" name="imgd" class="img-url" value="Browse..." />
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.optionE, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.optionE, new { htmlAttributes = new { @class = "form-control", @placeholder = "E" } })
                @Html.ValidationMessageFor(model => model.optionE, "", new { @class = "text-danger" })
                <input type="file" id="imge" name="imge" class="img-url" value="Browse..." />
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <button type="button" class="btn btn-primary" data-dismiss="modal">CANCEL</button>
                <input type="submit" value="SAVE" class="btn btn-primary" />
            </div>
        </div>
    </div>
}

@Scripts.Render("~/bundles/jqueryval")


<script type="text/javascript">
    $("#form-set").submit(function () {
        var dataform = new FormData($(this)[0]);
        $.ajax({
            url: this.action,
            type: this.method,
            data: dataform,
            processData: false,
            contentType: false,
            cache: false,
            timeout: 600000,
            success: function (result) {
                if (result.success) {
                    alert("Save successful\nId: " + result.entity.Id + "Name: " + result.entity.Name);
                    $(".modal").modal("hide");
                    GetList();
                }
                else {
                    alert("Error\nName: " + result.message);
                }
            }
        })
        return false;
    });
</script>   