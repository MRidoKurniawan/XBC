@model XBC.ViewModel.BiodataViewModel
@{
    ViewBag.id = Session["id"]; //(untuk User LOGIN ID)
}

@using (Html.BeginForm("Create", "Biodata", FormMethod.Post, new { id = "form-create", name = "form-create" }))
{
    @Html.AntiForgeryToken()
    <input type="hidden" id="UserId" name="UserId" value="@ViewBag.id" /> //(untuk User LOGIN ID)
    <div class="form-horizontal">

        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            <div class="col-md-10">
                @Html.LabelFor(model => model.name, htmlAttributes: new { @class = "control-label col-md-1" })
                @Html.EditorFor(model => model.name, new { htmlAttributes = new { @class = "form-control", @placeholder = "Name", @pattern = "[A-Za-z]+[A-Za-z ]{0,}", @title = "Hanya huruf!" } })
                @Html.ValidationMessageFor(model => model.name, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-10">
                @Html.LabelFor(model => model.last_education, htmlAttributes: new { @class = "control-label col-md-1" })
                @Html.EditorFor(model => model.last_education, new { htmlAttributes = new { @class = "form-control", @placeholder = "Last Education" } })
                @Html.ValidationMessageFor(model => model.last_education, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-10">
                @Html.LabelFor(model => model.educational_level, htmlAttributes: new { @class = "control-label col-md-1" })
                @Html.EditorFor(model => model.educational_level, new { htmlAttributes = new { @class = "form-control", @placeholder = "Education Level" } })
                @Html.ValidationMessageFor(model => model.educational_level, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-10">
                @Html.LabelFor(model => model.graduation_year, htmlAttributes: new { @class = "control-label col-md-1" })
                @Html.EditorFor(model => model.graduation_year, new { htmlAttributes = new { @class = "form-control", @placeholder = "Graduation Year", @pattern = "[0-9]{4,4}", @title = "Harus angka dan 4 digit tanpa spasi!" } })
                @Html.ValidationMessageFor(model => model.graduation_year, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-10">
                @Html.LabelFor(model => model.majors, htmlAttributes: new { @class = "control-label col-md-1" })
                @Html.EditorFor(model => model.majors, new { htmlAttributes = new { @class = "form-control", @placeholder = "Majors" } })
                @Html.ValidationMessageFor(model => model.majors, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-10">
                @Html.LabelFor(model => model.gpa, htmlAttributes: new { @class = "control-label col-md-1" })
                @Html.EditorFor(model => model.gpa, new { htmlAttributes = new { @class = "form-control gpa", @placeholder = "GPA", @pattern = "[0-4]+[.]+[0-9]{2,2}", @title = "GPA minimal 0 maksimal 4! Gunakan 3 digit!" } })
                @Html.ValidationMessageFor(model => model.gpa, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <button type="button" class="btn btn-default" data-dismiss="modal">Cancel</button>
                <input type="submit" value="Save" class="btn btn-default" />
            </div>
        </div>
    </div>
}

@Scripts.Render("~/bundles/jqueryval")

<script type="text/javascript">
    $(document).ready(function () { //.
        $("#form-create").removeAttr("novalidate") //.untuk VALIDASI pattern
    });

    $("#form-create").submit(function () {
        if (parseFloat($(".gpa").val()) <= 4 && parseFloat($(".gpa").val()) >= 0) {
            //parseFloat = mengubah semua ke decimal, isNumeric = hanya boleh numeric
            $.ajax({
                url: this.action,
                type: this.method,
                data: $(this).serialize(),
                success: function (result) {
                    if (result.success) {
                        alert("Save successful!\nNama: " + result.entity.name);
                        $(".modal-umum").modal("hide");
                        GetList();
                    } else {
                        alert("Error!\n" + result.message);
                    }
                }
            });

        }
        else {
            alert("Nilai GPA harus angka, minimal 0 dan maksimal 4!");
        }
        return false;
    });
</script>
